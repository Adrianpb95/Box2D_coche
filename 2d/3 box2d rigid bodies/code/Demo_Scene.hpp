/*
	ADRIAN PONCE BALSEIRO
	ESNE G4.3 DDVJ
	adrianpb95@gmail.com
	07 / 02 / 2018
*/


////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include "Scene.hpp"
#include "Elements.hpp"
#include "Particles.hpp"


class Demo_Scene : public Scene
{


	////////////////////////////////////////////////////////////
	// Declaracion de variables			
	////////////////////////////////////////////////////////////
public:
	Vehicle * car;
	Turret * turret;
	Trigger * triggerTurret;
	Platform * platformMovil;

private:
	Clock timer;
	bool finish;
	ParticleSystem particles1, particles2;
	

	////////////////////////////////////////////////////////////
	// Declaracion de funciones	
	////////////////////////////////////////////////////////////
public:

	////////////////////////////////////////////////////////////
	/// \brief Constructor de Demo_Scene	--> Inicia el mundo fisico y los elementos de la escena
	////////////////////////////////////////////////////////////
	Demo_Scene();

	////////////////////////////////////////////////////////////
	/// \brief	Actualiza el mundo y se encarga de detectar los eventos del mundo
	///	@param	deltaTime	Tiempo de refresco del mundo
	////////////////////////////////////////////////////////////
	void update(float deltaTime);

	////////////////////////////////////////////////////////////
	/// \brief	Renderiza todos los games object de la escena
	///	@param	renderer	Ventana 2D de pintado de la escena
	////////////////////////////////////////////////////////////
	void render(sf::RenderWindow & renderer);	

	////////////////////////////////////////////////////////////
	/// \brief	Crea el mundo fisico
	///	@param	world_width		Ancho del mundo/ventana
	///	@param	world_height	Alto del mundo/ventana
	////////////////////////////////////////////////////////////
	shared_ptr< b2World > create_physics_world(float world_width, float world_height);

	////////////////////////////////////////////////////////////
	/// \brief	Detector de eventos de teclado
	///	@param	event	Tipo de evento recibido
	////////////////////////////////////////////////////////////
	void keyboard(Event event);

	////////////////////////////////////////////////////////////
	/// \brief	Reinicia la escena si el coche se cae por el hueco
	////////////////////////////////////////////////////////////
	void resetScene();

	////////////////////////////////////////////////////////////
	/// \brief	Termina la escena si la bola entra en el recipiente
	////////////////////////////////////////////////////////////
	void finishScene();

	

	



};